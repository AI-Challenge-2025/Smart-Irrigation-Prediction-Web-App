from sklearn.metrics import accuracy_score
import streamlit as st
import pandas as pd
import joblib

# ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="Smart Irrigation Predictor", layout="centered")
st.title("üíß Smart Irrigation Prediction Web App")

st.markdown("""
‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏ß‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà üå±

**Status 1 = ‡∏£‡∏î‡∏ô‡πâ‡∏≥**  |  **Status 0 = ‡πÑ‡∏°‡πà‡∏£‡∏î‡∏ô‡πâ‡∏≥**
""")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
@st.cache_resource
def load_model():
    return joblib.load("Smart_irrigation_model.pkl")

model = load_model()

# ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
uploaded_file = st.file_uploader("üì• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:", type="csv")

if uploaded_file:
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        input_df = pd.read_csv(uploaded_file)
        st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ 'Status' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‚Üí ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ß‡∏±‡∏î Accuracy
        has_true_label = False
        if 'Status' in input_df.columns:
            has_true_label = True
            true_labels = input_df['Status']
            input_df = input_df.drop('Status', axis=1)

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
        predictions = model.predict(input_df)

        # ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result_df = input_df.copy()
        result_df['Predicted Status'] = predictions
        result_df['Predicted Label'] = result_df['Predicted Status'].apply(lambda x: 'üíß ‡∏£‡∏î‡∏ô‡πâ‡∏≥' if x == 1 else '‚òÄÔ∏è ‡πÑ‡∏°‡πà‡∏£‡∏î‡∏ô‡πâ‡∏≥')

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        st.subheader("üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        st.dataframe(result_df, use_container_width=True)

        # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Ground Truth ‚Üí ‡πÅ‡∏õ‡∏•‡∏á label ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy
        if has_true_label:
            if true_labels.dtype == object:
                true_labels = true_labels.apply(lambda x: 1 if str(x).strip().upper() == 'ON' else 0)
            acc = accuracy_score(true_labels, predictions)
            st.success(f"‚úÖ Accuracy ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤: {acc:.4f}")

        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        csv_download = result_df.to_csv(index=False).encode('utf-8')
        st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô CSV", data=csv_download, file_name="prediction_results.csv", mime="text/csv")

    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå: {e}")
